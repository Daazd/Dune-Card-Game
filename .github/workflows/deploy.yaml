name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted

    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up PostgreSQL environment variables
      run: |
        echo "POSTGRES_DB=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
        echo "POSTGRES_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Debug ECR URL
      run: |
        echo "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dune-cf-backend:latest"

    - name: Build and push backend Docker image
      working-directory: ./Dunecardgame
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        docker build -t dune-cf-backend:latest -f Dockerfile .
        docker tag dune-cf-backend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/dune-cf-backend:latest
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/dune-cf-backend:latest

    - name: Build frontend Docker image
      working-directory: Dunecardgame/Dune-Front-End
      run: docker build -t dune-cf-frontend:latest .

    - name: Extract frontend build artifacts
      run: |
        container_id=$(docker create dune-cf-frontend:latest)
        docker cp $container_id:/usr/share/nginx/html ./dist
        docker rm $container_id

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install AWS CLI and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install awscli==1.27.160 botocore==1.29.160 s3transfer==0.6.1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Sync files to S3
      run: aws s3 sync ./dist s3://dune-bucket-23 --delete

    - name: Invalidate CloudFront cache
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

    - name: Check EC2 instance state
      run: |
        aws ec2 describe-instance-status --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'InstanceStatuses[0].InstanceState.Name' --output text

    - name: Get EC2 Instance Availability Zone
      run: |
          AZ=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].Placement.AvailabilityZone' --output text)
          echo "EC2_AVAILABILITY_ZONE=$AZ" >> $GITHUB_ENV
          echo "Availability Zone: $AZ"

    - name: Check Security Group Rules
      run: |
        SG_ID=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].SecurityGroups[0].GroupId' --output text)
        echo "Security Group ID: $SG_ID"
        aws ec2 describe-security-group-rules --filters Name="group-id",Values="$SG_ID" --query 'SecurityGroupRules[?IpProtocol==`tcp` && FromPort==`22`]

    - name: Check Network ACL Rules
      run: |
        SUBNET_ID=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].SubnetId' --output text)
        echo "Subnet ID: $SUBNET_ID"
        NACL_ID=$(aws ec2 describe-network-acls --filters Name=association.subnet-id,Values=$SUBNET_ID --query 'NetworkAcls[0].NetworkAclId' --output text)
        echo "Network ACL ID: $NACL_ID"
        aws ec2 describe-network-acls --network-acl-ids $NACL_ID

    - name: Try EC2 Instance Connect
      run: |
        aws ec2-instance-connect send-ssh-public-key \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --availability-zone ${{ env.EC2_AVAILABILITY_ZONE }} \
          --instance-os-user ec2-user \
          --ssh-public-key file://$HOME/.ssh/id_rsa.pub
        ssh -o StrictHostKeyChecking=no -i $HOME/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} "echo Connection successful"
        
    - name: Deploy to EC2
      env:
        EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
        EC2_USER: ec2-user  # or the appropriate user for your EC2 instance
      run: |
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${EC2_USER}@${EC2_PUBLIC_IP} '
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dune-cf-backend:latest &&
          docker stop dune-backend || true &&
          docker rm dune-backend || true &&
          docker run -d --name dune-backend -p 8000:8000 \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dune-cf-backend:latest
        '
        rm private_key.pem
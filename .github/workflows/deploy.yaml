name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up PostgreSQL environment variables
      run: |
        echo "POSTGRES_DB=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
        echo "POSTGRES_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Debug ECR URL
      run: |
        echo "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dune-cf-backend:latest"

    - name: Build and push backend Docker image
      working-directory: ./Dunecardgame
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        docker build -t dune-cf-backend:latest -f Dockerfile .
        docker tag dune-cf-backend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/dune-cf-backend:latest
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/dune-cf-backend:latest

    - name: Build frontend Docker image
      working-directory: Dunecardgame/Dune-Front-End
      run: docker build -t dune-cf-frontend:latest .

    - name: Extract frontend build artifacts
      run: |
        container_id=$(docker create dune-cf-frontend:latest)
        docker cp $container_id:/usr/share/nginx/html ./dist
        docker rm $container_id

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install AWS CLI and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install awscli==1.27.160 botocore==1.29.160 s3transfer==0.6.1

    - name: Sync files to S3
      run: aws s3 sync ./dist s3://dune-bucket-23 --delete

    - name: Invalidate CloudFront cache
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

    - name: Get VPC and Subnet Info
      run: |
        VPC_ID=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].VpcId' --output text)
        CURRENT_SUBNET_ID=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].SubnetId' --output text)
        AZ=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].Placement.AvailabilityZone' --output text)
        echo "VPC ID: $VPC_ID"
        echo "Current Subnet ID: $CURRENT_SUBNET_ID"
        echo "Availability Zone: $AZ"
        echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
        echo "CURRENT_SUBNET_ID=$CURRENT_SUBNET_ID" >> $GITHUB_ENV
        echo "AZ=$AZ" >> $GITHUB_ENV

    - name: Check for Existing Public Subnet
      run: |
        PUBLIC_SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=${{ env.VPC_ID }}" "Name=map-public-ip-on-launch,Values=true" --query 'Subnets[0].SubnetId' --output text)
        if [ "$PUBLIC_SUBNET_ID" != "None" ]; then
          echo "Existing public subnet found: $PUBLIC_SUBNET_ID"
          echo "PUBLIC_SUBNET_ID=$PUBLIC_SUBNET_ID" >> $GITHUB_ENV
        else
          echo "No existing public subnet found. Creating new one."
        fi

    - name: Create Public Subnet (if needed)
      if: env.PUBLIC_SUBNET_ID == ''
      run: |
        IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=${{ env.VPC_ID }}" --query 'InternetGateways[0].InternetGatewayId' --output text)
        NEW_SUBNET_ID=$(aws ec2 create-subnet --vpc-id ${{ env.VPC_ID }} --cidr-block 10.0.2.0/24 --availability-zone ${{ env.AZ }} --query 'Subnet.SubnetId' --output text)
        echo "New Subnet ID: $NEW_SUBNET_ID"
        
        RT_ID=$(aws ec2 create-route-table --vpc-id ${{ env.VPC_ID }} --query 'RouteTable.RouteTableId' --output text)
        echo "New Route Table ID: $RT_ID"
        
        aws ec2 create-route --route-table-id $RT_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID
        aws ec2 associate-route-table --subnet-id $NEW_SUBNET_ID --route-table-id $RT_ID
        aws ec2 modify-subnet-attribute --subnet-id $NEW_SUBNET_ID --map-public-ip-on-launch
        
        echo "PUBLIC_SUBNET_ID=$NEW_SUBNET_ID" >> $GITHUB_ENV

    - name: Move EC2 to Public Subnet (if needed)
      if: env.CURRENT_SUBNET_ID != env.PUBLIC_SUBNET_ID
      run: |
        aws ec2 stop-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
        echo "Waiting for instance to stop..."
        aws ec2 wait instance-stopped --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
        
        ENI_ID=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].NetworkInterfaces[0].NetworkInterfaceId' --output text)
        echo "Network Interface ID: $ENI_ID"
        
        aws ec2 modify-network-interface-attribute --network-interface-id $ENI_ID --attachment AttachmentId=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Attachment.AttachmentId' --output text),DeleteOnTermination=true
        
        aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
        echo "Waiting for instance to start..."
        aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}

    - name: Update Public IP
      run: |
        NEW_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "New Public IP: $NEW_PUBLIC_IP"
        echo "EC2_PUBLIC_IP=$NEW_PUBLIC_IP" >> $GITHUB_ENV

    - name: Check VPC and Internet Gateway
      run: |
        echo "VPC ID: ${{ env.VPC_ID }}"
        aws ec2 describe-vpcs --vpc-ids ${{ env.VPC_ID }} --query 'Vpcs[0].{CidrBlock:CidrBlock,State:State}'
        echo "Checking Internet Gateway..."
        aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=${{ env.VPC_ID }}" --query 'InternetGateways[*].{InternetGatewayId:InternetGatewayId,State:Attachments[0].State}'

    - name: Check Route Table
      run: |
        echo "Subnet ID: ${{ env.PUBLIC_SUBNET_ID }}"
        aws ec2 describe-route-tables --filters "Name=association.subnet-id,Values=${{ env.PUBLIC_SUBNET_ID }}" --query 'RouteTables[*].Routes'

    - name: Check Network Interface
      run: |
        aws ec2 describe-network-interfaces --filters "Name=attachment.instance-id,Values=${{ secrets.EC2_INSTANCE_ID }}" --query 'NetworkInterfaces[*].{SubnetId:SubnetId,PrivateIpAddress:PrivateIpAddress,PublicIp:Association.PublicIp,Status:Status}'

    - name: Check Security Group Rules
      run: |
        SG_ID=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].SecurityGroups[0].GroupId' --output text)
        echo "Security Group ID: $SG_ID"
        aws ec2 describe-security-group-rules --filters Name="group-id",Values="$SG_ID" --query 'SecurityGroupRules[?IpProtocol==`tcp` && FromPort==`22`]'

    - name: Check Network ACL Rules
      run: |
        NACL_ID=$(aws ec2 describe-network-acls --filters Name=association.subnet-id,Values=${{ env.PUBLIC_SUBNET_ID }} --query 'NetworkAcls[0].NetworkAclId' --output text)
        echo "Network ACL ID: $NACL_ID"
        aws ec2 describe-network-acls --network-acl-ids $NACL_ID

    - name: Test SSH Connection
      run: |
        ssh-keygen -t rsa -b 4096 -f ./id_rsa -N ""
        aws ec2-instance-connect send-ssh-public-key --instance-id ${{ secrets.EC2_INSTANCE_ID }} --availability-zone ${{ env.AZ }} --instance-os-user ec2-user --ssh-public-key file://./id_rsa.pub
        ssh -o StrictHostKeyChecking=no -i ./id_rsa ec2-user@${{ env.EC2_PUBLIC_IP }} "echo Connection successful"

    - name: Deploy to EC2
      env:
        EC2_USER: ec2-user
      run: |
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${EC2_USER}@${{ env.EC2_PUBLIC_IP }} '
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dune-cf-backend:latest &&
          docker stop dune-backend || true &&
          docker rm dune-backend || true &&
          docker run -d --name dune-backend -p 8000:8000 \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/dune-cf-backend:latest
        '
        rm private_key.pem
name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build and push backend Docker image
      working-directory: ./Dunecardgame
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        docker build -t dune-cf-backend:latest -f Dockerfile .
        docker tag dune-cf-backend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/dune-cf-backend:latest
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/dune-cf-backend:latest

    - name: Get latest Docker solution stack
      run: |
          SOLUTION_STACK=$(aws elasticbeanstalk list-available-solution-stacks --query "SolutionStacks[?contains(@, 'running Docker')]|[0]" --output text)
          echo "Latest Docker solution stack: $SOLUTION_STACK"
          echo "SOLUTION_STACK=$SOLUTION_STACK" >> $GITHUB_ENV

          - name: Check, terminate, and recreate Elastic Beanstalk environment
          run: |
            echo "Terminating existing environment..."
            aws elasticbeanstalk terminate-environment --environment-name Dune-backend-env || true
            
            echo "Waiting for environment to terminate..."
            while true; do
              STATUS=$(aws elasticbeanstalk describe-environments --environment-names Dune-backend-env --query "Environments[0].Status" --output text)
              if [ "$STATUS" = "Terminated" ] || [ "$STATUS" = "None" ]; then
                echo "Environment terminated"
                break
              else
                echo "Environment is $STATUS. Waiting..."
                sleep 30
              fi
            done
            
            echo "Creating new environment..."
            aws elasticbeanstalk create-environment \
              --application-name dune-backend \
              --environment-name Dune-backend-env \
              --solution-stack-name "${{ env.SOLUTION_STACK }}" \
              --option-settings file://eb-options.json
            
            echo "Waiting for new environment to be ready..."
            TIMEOUT=1800  # 30 minutes timeout
            INTERVAL=60   # Check every 60 seconds
            ELAPSED=0
            while [ $ELAPSED -lt $TIMEOUT ]; do
              ENV_INFO=$(aws elasticbeanstalk describe-environments --environment-names Dune-backend-env --query "Environments[0]")
              STATUS=$(echo $ENV_INFO | jq -r '.Status')
              HEALTH=$(echo $ENV_INFO | jq -r '.Health')
              echo "Environment Status: $STATUS, Health: $HEALTH"
              
              if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ]; then
                echo "New environment is ready and healthy"
                break
              elif [ "$STATUS" = "Terminated" ]; then
                echo "Environment creation failed. Cannot proceed."
                echo "Full environment info:"
                echo $ENV_INFO | jq '.'
                exit 1
              else
                echo "Environment is still $STATUS. Waiting..."
                sleep $INTERVAL
                ELAPSED=$((ELAPSED + INTERVAL))
              fi
            done
            
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "Timeout reached. Environment creation did not complete in time."
              echo "Full environment info:"
              aws elasticbeanstalk describe-environments --environment-names Dune-backend-env | jq '.'
              exit 1
            fi
      
    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v21
      with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: dune-backend2
          environment_name: Dune-backend2-env
          version_label: ${{ env.VERSION_LABEL }}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: ${{ env.VERSION_LABEL }}.zip
          wait_for_deployment: true

    - name: Build frontend Docker image
      working-directory: Dunecardgame/Dune-Front-End
      run: docker build -t dune-cf-frontend:latest .

    - name: Extract frontend build artifacts
      run: |
        container_id=$(docker create dune-cf-frontend:latest)
        docker cp $container_id:/usr/share/nginx/html ./dist
        docker rm $container_id

    - name: Sync files to S3
      run: aws s3 sync ./dist s3://dune-bucket-23 --delete

    - name: Invalidate CloudFront cache
      run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
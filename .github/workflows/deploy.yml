name: CI/CD Pipeline for LKE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Frontend Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/dune-frontend:latest ./Dunecardgame/Dune-Front-End

    - name: Push Frontend Docker image in chunks
      run: |
        docker save ${{ secrets.DOCKER_USERNAME }}/dune-frontend:latest | gzip | split -b 20m - frontend-image-chunk
        for chunk in frontend-image-chunk*; do
          curl -X POST -H "Content-Type: application/octet-stream" --data-binary @$chunk \
            -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" \
            "https://registry-1.docker.io/v2/${{ secrets.DOCKER_USERNAME }}/dune-frontend/blobs/uploads/?digest=sha256:$(sha256sum $chunk | cut -d' ' -f1)"
        done

    - name: Build Backend Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/dune-backend:latest ./Dunecardgame

    - name: Push Backend Docker image in chunks
      run: |
        docker save ${{ secrets.DOCKER_USERNAME }}/dune-backend:latest | gzip | split -b 20m - backend-image-chunk
        for chunk in backend-image-chunk*; do
          curl -X POST -H "Content-Type: application/octet-stream" --data-binary @$chunk \
            -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" \
            "https://registry-1.docker.io/v2/${{ secrets.DOCKER_USERNAME }}/dune-backend/blobs/uploads/?digest=sha256:$(sha256sum $chunk | cut -d' ' -f1)"
        done

    - name: Install Linode CLI
      run: |
        pip install linode-cli
  
    - name: Configure Linode CLI
      env:
        LINODE_CLI_TOKEN: ${{ secrets.LINODE_CLI_TOKEN }}
      run: |
        echo "LINODE_CLI_TOKEN=$LINODE_CLI_TOKEN" >> $GITHUB_ENV
        echo "Linode CLI Token is set: ${{ secrets.LINODE_CLI_TOKEN != '' }}"
    
    - name: Test Linode CLI
      run: |
        linode-cli --version
        linode-cli regions list

    - name: List LKE clusters
      run: |
        echo "Available LKE clusters:"
        linode-cli lke clusters-list --json | jq -r '.[] | "ID: \(.id), Label: \(.label), API Endpoint: \(.api_endpoints[0])"'

    - name: Parse cluster information
      run: |
        echo "Parsing cluster information"
        cat clusters.json | jq '.'
        echo "Attempting to extract cluster ID"
        CLUSTER_ID=$(cat clusters.json | jq -r '.[0].id')
        echo "First cluster ID: $CLUSTER_ID"
  
    - name: Extract LKE Cluster ID
      run: |
        echo "LKE_CLUSTER_ID=$(echo ${{ secrets.LKE_CLUSTER_ID }} | tr -dc '0-9')" >> $GITHUB_ENV
  
    - name: Get LKE kubeconfig
      run: |
        if [ -z "$CLUSTER_ID" ]; then
          echo "Error: No LKE cluster found"
          exit 1
        fi
        echo "Using Cluster ID: $CLUSTER_ID"
        linode-cli lke kubeconfig-view $CLUSTER_ID --text > kubeconfig.yaml
        if [ $? -ne 0 ]; then
          echo "Error: Failed to get kubeconfig"
          exit 1
        fi
        echo "Successfully retrieved kubeconfig"
        cat kubeconfig.yaml
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.21.0'

    - name: Deploy to LKE
      run: |
        kubectl --kubeconfig=kubeconfig.yaml apply -f ./Dunecardgame/k8s/

    - name: Verify deployment
      run: |
        kubectl --kubeconfig=kubeconfig.yaml get pods
        kubectl --kubeconfig=kubeconfig.yaml get services

#push






